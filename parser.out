Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    Q_MARK

Grammar

Rule 0     S' -> run
Rule 1     run -> expression
Rule 2     run -> var_assign
Rule 3     run -> condition
Rule 4     run -> empty
Rule 5     var_assign -> NAME EQUALS expression SEMICOLON var_assign
Rule 6     var_assign -> NAME EQUALS expression SEMICOLON expression
Rule 7     var_assign -> NAME EQUALS expression expression
Rule 8     var_assign -> NAME EQUALS expression SEMICOLON
Rule 9     var_assign -> NAME EQUALS INPUT SEMICOLON
Rule 10    expression -> expression MULTIPLY expression SEMICOLON
Rule 11    expression -> expression DIVIDE expression SEMICOLON
Rule 12    expression -> expression PLUS expression SEMICOLON
Rule 13    expression -> expression MINUS expression SEMICOLON
Rule 14    expression -> INT
Rule 15    expression -> FLOAT
Rule 16    expression -> STRING
Rule 17    expression -> NAME
Rule 18    expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
Rule 19    expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
Rule 20    expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
Rule 21    expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
Rule 22    expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
Rule 23    expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
Rule 24    expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
Rule 25    expression -> PRINT expression SEMICOLON expression
Rule 26    expression -> PRINT expression SEMICOLON var_assign
Rule 27    expression -> PRINT expression SEMICOLON
Rule 28    condition -> INT LESS INT
Rule 29    condition -> INT MORE INT
Rule 30    condition -> INT EQUALEQUAL INT
Rule 31    expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE
Rule 32    expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
Rule 33    expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
Rule 34    expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
Rule 35    expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
Rule 36    expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
Rule 37    expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
Rule 38    expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
Rule 39    expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
Rule 40    expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
Rule 41    expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
Rule 42    expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
Rule 43    expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
Rule 44    expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
Rule 45    expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
Rule 46    expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
Rule 47    empty -> <empty>

Terminals, with rules where they appear

CLOSE                : 19 20 21 22 23 24 31 32 33 34 35 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46
CLOSE_P              : 18 19 20 21 22 23 24 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
DIVIDE               : 11
DRAW                 : 18
ELSE                 : 37 38 39 40 41 42 43 44 45 46
EQUALEQUAL           : 30
EQUALS               : 5 6 7 8 9
FLOAT                : 15
FOR                  : 19 20 21 22 23 24
IF                   : 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
INPUT                : 9
INT                  : 14 19 20 21 22 23 24 28 28 29 29 30 30
LESS                 : 28
MINUS                : 13
MORE                 : 29
MULTIPLY             : 10
NAME                 : 5 6 7 8 9 17
OPEN                 : 19 20 21 22 23 24 31 32 33 34 35 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46
OPEN_P               : 18 19 20 21 22 23 24 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
PLUS                 : 12
PRINT                : 25 26 27
Q_MARK               : 
SEMICOLON            : 5 6 8 9 10 11 12 13 18 25 26 27
STRING               : 16
error                : 

Nonterminals, with rules where they appear

condition            : 3 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
empty                : 4
expression           : 1 5 6 6 7 7 8 10 10 11 11 12 12 13 13 18 18 18 18 19 20 20 21 24 25 25 26 27 31 33 33 34 36 37 37 38 40 41 41 41 42 42 43 45 45 46 46
run                  : 0
var_assign           : 2 5 19 21 22 22 23 26 32 34 35 35 36 38 39 39 40 42 43 43 44 44 44 45 46

Parsing method: LALR

state 0

    (0) S' -> . run
    (1) run -> . expression
    (2) run -> . var_assign
    (3) run -> . condition
    (4) run -> . empty
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON
    (28) condition -> . INT LESS INT
    (29) condition -> . INT MORE INT
    (30) condition -> . INT EQUALEQUAL INT
    (47) empty -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    $end            reduce using rule 47 (empty -> .)

    run                            shift and go to state 1
    expression                     shift and go to state 2
    var_assign                     shift and go to state 3
    condition                      shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> run .



state 2

    (1) run -> expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

    $end            reduce using rule 1 (run -> expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 3

    (2) run -> var_assign .

    $end            reduce using rule 2 (run -> var_assign .)


state 4

    (3) run -> condition .

    $end            reduce using rule 3 (run -> condition .)


state 5

    (4) run -> empty .

    $end            reduce using rule 4 (run -> empty .)


state 6

    (14) expression -> INT .
    (28) condition -> INT . LESS INT
    (29) condition -> INT . MORE INT
    (30) condition -> INT . EQUALEQUAL INT

    MULTIPLY        reduce using rule 14 (expression -> INT .)
    DIVIDE          reduce using rule 14 (expression -> INT .)
    PLUS            reduce using rule 14 (expression -> INT .)
    MINUS           reduce using rule 14 (expression -> INT .)
    $end            reduce using rule 14 (expression -> INT .)
    LESS            shift and go to state 18
    MORE            shift and go to state 19
    EQUALEQUAL      shift and go to state 20


state 7

    (15) expression -> FLOAT .

    MULTIPLY        reduce using rule 15 (expression -> FLOAT .)
    DIVIDE          reduce using rule 15 (expression -> FLOAT .)
    PLUS            reduce using rule 15 (expression -> FLOAT .)
    MINUS           reduce using rule 15 (expression -> FLOAT .)
    $end            reduce using rule 15 (expression -> FLOAT .)
    SEMICOLON       reduce using rule 15 (expression -> FLOAT .)
    INT             reduce using rule 15 (expression -> FLOAT .)
    FLOAT           reduce using rule 15 (expression -> FLOAT .)
    STRING          reduce using rule 15 (expression -> FLOAT .)
    NAME            reduce using rule 15 (expression -> FLOAT .)
    DRAW            reduce using rule 15 (expression -> FLOAT .)
    FOR             reduce using rule 15 (expression -> FLOAT .)
    PRINT           reduce using rule 15 (expression -> FLOAT .)
    IF              reduce using rule 15 (expression -> FLOAT .)
    CLOSE           reduce using rule 15 (expression -> FLOAT .)
    CLOSE_P         reduce using rule 15 (expression -> FLOAT .)


state 8

    (16) expression -> STRING .

    MULTIPLY        reduce using rule 16 (expression -> STRING .)
    DIVIDE          reduce using rule 16 (expression -> STRING .)
    PLUS            reduce using rule 16 (expression -> STRING .)
    MINUS           reduce using rule 16 (expression -> STRING .)
    $end            reduce using rule 16 (expression -> STRING .)
    SEMICOLON       reduce using rule 16 (expression -> STRING .)
    INT             reduce using rule 16 (expression -> STRING .)
    FLOAT           reduce using rule 16 (expression -> STRING .)
    STRING          reduce using rule 16 (expression -> STRING .)
    NAME            reduce using rule 16 (expression -> STRING .)
    DRAW            reduce using rule 16 (expression -> STRING .)
    FOR             reduce using rule 16 (expression -> STRING .)
    PRINT           reduce using rule 16 (expression -> STRING .)
    IF              reduce using rule 16 (expression -> STRING .)
    CLOSE           reduce using rule 16 (expression -> STRING .)
    CLOSE_P         reduce using rule 16 (expression -> STRING .)


state 9

    (17) expression -> NAME .
    (5) var_assign -> NAME . EQUALS expression SEMICOLON var_assign
    (6) var_assign -> NAME . EQUALS expression SEMICOLON expression
    (7) var_assign -> NAME . EQUALS expression expression
    (8) var_assign -> NAME . EQUALS expression SEMICOLON
    (9) var_assign -> NAME . EQUALS INPUT SEMICOLON

    MULTIPLY        reduce using rule 17 (expression -> NAME .)
    DIVIDE          reduce using rule 17 (expression -> NAME .)
    PLUS            reduce using rule 17 (expression -> NAME .)
    MINUS           reduce using rule 17 (expression -> NAME .)
    $end            reduce using rule 17 (expression -> NAME .)
    SEMICOLON       reduce using rule 17 (expression -> NAME .)
    INT             reduce using rule 17 (expression -> NAME .)
    FLOAT           reduce using rule 17 (expression -> NAME .)
    STRING          reduce using rule 17 (expression -> NAME .)
    NAME            reduce using rule 17 (expression -> NAME .)
    DRAW            reduce using rule 17 (expression -> NAME .)
    FOR             reduce using rule 17 (expression -> NAME .)
    PRINT           reduce using rule 17 (expression -> NAME .)
    IF              reduce using rule 17 (expression -> NAME .)
    CLOSE           reduce using rule 17 (expression -> NAME .)
    CLOSE_P         reduce using rule 17 (expression -> NAME .)
    EQUALS          shift and go to state 21


state 10

    (18) expression -> DRAW . OPEN_P expression expression expression expression CLOSE_P SEMICOLON

    OPEN_P          shift and go to state 22


state 11

    (19) expression -> FOR . OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> FOR . OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> FOR . OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> FOR . OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> FOR . OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> FOR . OPEN_P INT CLOSE_P OPEN expression CLOSE

    OPEN_P          shift and go to state 23


state 12

    (25) expression -> PRINT . expression SEMICOLON expression
    (26) expression -> PRINT . expression SEMICOLON var_assign
    (27) expression -> PRINT . expression SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 24

state 13

    (31) expression -> IF . OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> IF . OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> IF . OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> IF . OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> IF . OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> IF . OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> IF . OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> IF . OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> IF . OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> IF . OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> IF . OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> IF . OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> IF . OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> IF . OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> IF . OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> IF . OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    OPEN_P          shift and go to state 27


state 14

    (10) expression -> expression MULTIPLY . expression SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 28

state 15

    (11) expression -> expression DIVIDE . expression SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 29

state 16

    (12) expression -> expression PLUS . expression SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 30

state 17

    (13) expression -> expression MINUS . expression SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 31

state 18

    (28) condition -> INT LESS . INT

    INT             shift and go to state 32


state 19

    (29) condition -> INT MORE . INT

    INT             shift and go to state 33


state 20

    (30) condition -> INT EQUALEQUAL . INT

    INT             shift and go to state 34


state 21

    (5) var_assign -> NAME EQUALS . expression SEMICOLON var_assign
    (6) var_assign -> NAME EQUALS . expression SEMICOLON expression
    (7) var_assign -> NAME EQUALS . expression expression
    (8) var_assign -> NAME EQUALS . expression SEMICOLON
    (9) var_assign -> NAME EQUALS . INPUT SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    INPUT           shift and go to state 36
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 35

state 22

    (18) expression -> DRAW OPEN_P . expression expression expression expression CLOSE_P SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 37

state 23

    (19) expression -> FOR OPEN_P . INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> FOR OPEN_P . INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> FOR OPEN_P . INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> FOR OPEN_P . INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> FOR OPEN_P . INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> FOR OPEN_P . INT CLOSE_P OPEN expression CLOSE

    INT             shift and go to state 38


state 24

    (25) expression -> PRINT expression . SEMICOLON expression
    (26) expression -> PRINT expression . SEMICOLON var_assign
    (27) expression -> PRINT expression . SEMICOLON
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

    SEMICOLON       shift and go to state 39
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 25

    (14) expression -> INT .

    SEMICOLON       reduce using rule 14 (expression -> INT .)
    MULTIPLY        reduce using rule 14 (expression -> INT .)
    DIVIDE          reduce using rule 14 (expression -> INT .)
    PLUS            reduce using rule 14 (expression -> INT .)
    MINUS           reduce using rule 14 (expression -> INT .)
    INT             reduce using rule 14 (expression -> INT .)
    FLOAT           reduce using rule 14 (expression -> INT .)
    STRING          reduce using rule 14 (expression -> INT .)
    NAME            reduce using rule 14 (expression -> INT .)
    DRAW            reduce using rule 14 (expression -> INT .)
    FOR             reduce using rule 14 (expression -> INT .)
    PRINT           reduce using rule 14 (expression -> INT .)
    IF              reduce using rule 14 (expression -> INT .)
    $end            reduce using rule 14 (expression -> INT .)
    CLOSE           reduce using rule 14 (expression -> INT .)
    CLOSE_P         reduce using rule 14 (expression -> INT .)


state 26

    (17) expression -> NAME .

    SEMICOLON       reduce using rule 17 (expression -> NAME .)
    MULTIPLY        reduce using rule 17 (expression -> NAME .)
    DIVIDE          reduce using rule 17 (expression -> NAME .)
    PLUS            reduce using rule 17 (expression -> NAME .)
    MINUS           reduce using rule 17 (expression -> NAME .)
    INT             reduce using rule 17 (expression -> NAME .)
    FLOAT           reduce using rule 17 (expression -> NAME .)
    STRING          reduce using rule 17 (expression -> NAME .)
    NAME            reduce using rule 17 (expression -> NAME .)
    DRAW            reduce using rule 17 (expression -> NAME .)
    FOR             reduce using rule 17 (expression -> NAME .)
    PRINT           reduce using rule 17 (expression -> NAME .)
    IF              reduce using rule 17 (expression -> NAME .)
    $end            reduce using rule 17 (expression -> NAME .)
    CLOSE           reduce using rule 17 (expression -> NAME .)
    CLOSE_P         reduce using rule 17 (expression -> NAME .)


state 27

    (31) expression -> IF OPEN_P . condition CLOSE_P OPEN expression CLOSE
    (32) expression -> IF OPEN_P . condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> IF OPEN_P . condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> IF OPEN_P . condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> IF OPEN_P . condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> IF OPEN_P . condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> IF OPEN_P . condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> IF OPEN_P . condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> IF OPEN_P . condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> IF OPEN_P . condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> IF OPEN_P . condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> IF OPEN_P . condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> IF OPEN_P . condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> IF OPEN_P . condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> IF OPEN_P . condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> IF OPEN_P . condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (28) condition -> . INT LESS INT
    (29) condition -> . INT MORE INT
    (30) condition -> . INT EQUALEQUAL INT

    INT             shift and go to state 41

    condition                      shift and go to state 40

state 28

    (10) expression -> expression MULTIPLY expression . SEMICOLON
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

    SEMICOLON       shift and go to state 42
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 29

    (11) expression -> expression DIVIDE expression . SEMICOLON
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

    SEMICOLON       shift and go to state 43
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 30

    (12) expression -> expression PLUS expression . SEMICOLON
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

    SEMICOLON       shift and go to state 44
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 31

    (13) expression -> expression MINUS expression . SEMICOLON
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

    SEMICOLON       shift and go to state 45
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 32

    (28) condition -> INT LESS INT .

    $end            reduce using rule 28 (condition -> INT LESS INT .)
    CLOSE_P         reduce using rule 28 (condition -> INT LESS INT .)


state 33

    (29) condition -> INT MORE INT .

    $end            reduce using rule 29 (condition -> INT MORE INT .)
    CLOSE_P         reduce using rule 29 (condition -> INT MORE INT .)


state 34

    (30) condition -> INT EQUALEQUAL INT .

    $end            reduce using rule 30 (condition -> INT EQUALEQUAL INT .)
    CLOSE_P         reduce using rule 30 (condition -> INT EQUALEQUAL INT .)


state 35

    (5) var_assign -> NAME EQUALS expression . SEMICOLON var_assign
    (6) var_assign -> NAME EQUALS expression . SEMICOLON expression
    (7) var_assign -> NAME EQUALS expression . expression
    (8) var_assign -> NAME EQUALS expression . SEMICOLON
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    SEMICOLON       shift and go to state 47
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 46

state 36

    (9) var_assign -> NAME EQUALS INPUT . SEMICOLON

    SEMICOLON       shift and go to state 48


state 37

    (18) expression -> DRAW OPEN_P expression . expression expression expression CLOSE_P SEMICOLON
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 49

state 38

    (19) expression -> FOR OPEN_P INT . CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> FOR OPEN_P INT . CLOSE_P OPEN expression CLOSE expression
    (21) expression -> FOR OPEN_P INT . CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> FOR OPEN_P INT . CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> FOR OPEN_P INT . CLOSE_P OPEN var_assign CLOSE
    (24) expression -> FOR OPEN_P INT . CLOSE_P OPEN expression CLOSE

    CLOSE_P         shift and go to state 50


state 39

    (25) expression -> PRINT expression SEMICOLON . expression
    (26) expression -> PRINT expression SEMICOLON . var_assign
    (27) expression -> PRINT expression SEMICOLON .
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for DRAW resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    MULTIPLY        reduce using rule 27 (expression -> PRINT expression SEMICOLON .)
    DIVIDE          reduce using rule 27 (expression -> PRINT expression SEMICOLON .)
    PLUS            reduce using rule 27 (expression -> PRINT expression SEMICOLON .)
    MINUS           reduce using rule 27 (expression -> PRINT expression SEMICOLON .)
    $end            reduce using rule 27 (expression -> PRINT expression SEMICOLON .)
    SEMICOLON       reduce using rule 27 (expression -> PRINT expression SEMICOLON .)
    CLOSE           reduce using rule 27 (expression -> PRINT expression SEMICOLON .)
    CLOSE_P         reduce using rule 27 (expression -> PRINT expression SEMICOLON .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

  ! INT             [ reduce using rule 27 (expression -> PRINT expression SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 27 (expression -> PRINT expression SEMICOLON .) ]
  ! STRING          [ reduce using rule 27 (expression -> PRINT expression SEMICOLON .) ]
  ! NAME            [ reduce using rule 27 (expression -> PRINT expression SEMICOLON .) ]
  ! DRAW            [ reduce using rule 27 (expression -> PRINT expression SEMICOLON .) ]
  ! FOR             [ reduce using rule 27 (expression -> PRINT expression SEMICOLON .) ]
  ! PRINT           [ reduce using rule 27 (expression -> PRINT expression SEMICOLON .) ]
  ! IF              [ reduce using rule 27 (expression -> PRINT expression SEMICOLON .) ]

    expression                     shift and go to state 51
    var_assign                     shift and go to state 52

state 40

    (31) expression -> IF OPEN_P condition . CLOSE_P OPEN expression CLOSE
    (32) expression -> IF OPEN_P condition . CLOSE_P OPEN var_assign CLOSE
    (33) expression -> IF OPEN_P condition . CLOSE_P OPEN expression CLOSE expression
    (34) expression -> IF OPEN_P condition . CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> IF OPEN_P condition . CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> IF OPEN_P condition . CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> IF OPEN_P condition . CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> IF OPEN_P condition . CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> IF OPEN_P condition . CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> IF OPEN_P condition . CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> IF OPEN_P condition . CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> IF OPEN_P condition . CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> IF OPEN_P condition . CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> IF OPEN_P condition . CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> IF OPEN_P condition . CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> IF OPEN_P condition . CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    CLOSE_P         shift and go to state 53


state 41

    (28) condition -> INT . LESS INT
    (29) condition -> INT . MORE INT
    (30) condition -> INT . EQUALEQUAL INT

    LESS            shift and go to state 18
    MORE            shift and go to state 19
    EQUALEQUAL      shift and go to state 20


state 42

    (10) expression -> expression MULTIPLY expression SEMICOLON .

    MULTIPLY        reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    DIVIDE          reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    PLUS            reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    MINUS           reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    $end            reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    SEMICOLON       reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    INT             reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    FLOAT           reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    STRING          reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    NAME            reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    DRAW            reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    FOR             reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    PRINT           reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    IF              reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    CLOSE           reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)
    CLOSE_P         reduce using rule 10 (expression -> expression MULTIPLY expression SEMICOLON .)


state 43

    (11) expression -> expression DIVIDE expression SEMICOLON .

    MULTIPLY        reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    DIVIDE          reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    PLUS            reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    MINUS           reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    $end            reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    SEMICOLON       reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    INT             reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    FLOAT           reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    STRING          reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    NAME            reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    DRAW            reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    FOR             reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    PRINT           reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    IF              reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    CLOSE           reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)
    CLOSE_P         reduce using rule 11 (expression -> expression DIVIDE expression SEMICOLON .)


state 44

    (12) expression -> expression PLUS expression SEMICOLON .

    MULTIPLY        reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    DIVIDE          reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    PLUS            reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    MINUS           reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    $end            reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    SEMICOLON       reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    INT             reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    FLOAT           reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    STRING          reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    NAME            reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    DRAW            reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    FOR             reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    PRINT           reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    IF              reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    CLOSE           reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)
    CLOSE_P         reduce using rule 12 (expression -> expression PLUS expression SEMICOLON .)


state 45

    (13) expression -> expression MINUS expression SEMICOLON .

    MULTIPLY        reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    DIVIDE          reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    PLUS            reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    MINUS           reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    $end            reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    SEMICOLON       reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    INT             reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    FLOAT           reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    STRING          reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    NAME            reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    DRAW            reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    FOR             reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    PRINT           reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    IF              reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    CLOSE           reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)
    CLOSE_P         reduce using rule 13 (expression -> expression MINUS expression SEMICOLON .)


state 46

    (7) var_assign -> NAME EQUALS expression expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    SEMICOLON       reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    INT             reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    FLOAT           reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    STRING          reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    NAME            reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    DRAW            reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    FOR             reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    PRINT           reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    IF              reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    CLOSE           reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    CLOSE_P         reduce using rule 7 (var_assign -> NAME EQUALS expression expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17

  ! MULTIPLY        [ reduce using rule 7 (var_assign -> NAME EQUALS expression expression .) ]
  ! DIVIDE          [ reduce using rule 7 (var_assign -> NAME EQUALS expression expression .) ]
  ! PLUS            [ reduce using rule 7 (var_assign -> NAME EQUALS expression expression .) ]
  ! MINUS           [ reduce using rule 7 (var_assign -> NAME EQUALS expression expression .) ]


state 47

    (5) var_assign -> NAME EQUALS expression SEMICOLON . var_assign
    (6) var_assign -> NAME EQUALS expression SEMICOLON . expression
    (8) var_assign -> NAME EQUALS expression SEMICOLON .
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for DRAW resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .)
    MULTIPLY        reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .)
    DIVIDE          reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .)
    PLUS            reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .)
    MINUS           reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .)
    SEMICOLON       reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .)
    CLOSE           reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .)
    CLOSE_P         reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .)
    NAME            shift and go to state 54
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

  ! INT             [ reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .) ]
  ! STRING          [ reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .) ]
  ! NAME            [ reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .) ]
  ! DRAW            [ reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .) ]
  ! FOR             [ reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .) ]
  ! PRINT           [ reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .) ]
  ! IF              [ reduce using rule 8 (var_assign -> NAME EQUALS expression SEMICOLON .) ]

    expression                     shift and go to state 55
    var_assign                     shift and go to state 56

state 48

    (9) var_assign -> NAME EQUALS INPUT SEMICOLON .

    $end            reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    MULTIPLY        reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    DIVIDE          reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    PLUS            reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    MINUS           reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    SEMICOLON       reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    INT             reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    FLOAT           reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    STRING          reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    NAME            reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    DRAW            reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    FOR             reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    PRINT           reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    IF              reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    CLOSE           reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)
    CLOSE_P         reduce using rule 9 (var_assign -> NAME EQUALS INPUT SEMICOLON .)


state 49

    (18) expression -> DRAW OPEN_P expression expression . expression expression CLOSE_P SEMICOLON
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 57

state 50

    (19) expression -> FOR OPEN_P INT CLOSE_P . OPEN var_assign CLOSE expression
    (20) expression -> FOR OPEN_P INT CLOSE_P . OPEN expression CLOSE expression
    (21) expression -> FOR OPEN_P INT CLOSE_P . OPEN expression CLOSE var_assign
    (22) expression -> FOR OPEN_P INT CLOSE_P . OPEN var_assign CLOSE var_assign
    (23) expression -> FOR OPEN_P INT CLOSE_P . OPEN var_assign CLOSE
    (24) expression -> FOR OPEN_P INT CLOSE_P . OPEN expression CLOSE

    OPEN            shift and go to state 58


state 51

    (25) expression -> PRINT expression SEMICOLON expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    SEMICOLON       reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    INT             reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    FLOAT           reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    STRING          reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    NAME            reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    DRAW            reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    FOR             reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    PRINT           reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    IF              reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    CLOSE           reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    CLOSE_P         reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17

  ! MULTIPLY        [ reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .) ]
  ! PLUS            [ reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .) ]
  ! MINUS           [ reduce using rule 25 (expression -> PRINT expression SEMICOLON expression .) ]


state 52

    (26) expression -> PRINT expression SEMICOLON var_assign .

    MULTIPLY        reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    DIVIDE          reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    PLUS            reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    MINUS           reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    $end            reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    SEMICOLON       reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    INT             reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    FLOAT           reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    STRING          reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    NAME            reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    DRAW            reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    FOR             reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    PRINT           reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    IF              reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    CLOSE           reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)
    CLOSE_P         reduce using rule 26 (expression -> PRINT expression SEMICOLON var_assign .)


state 53

    (31) expression -> IF OPEN_P condition CLOSE_P . OPEN expression CLOSE
    (32) expression -> IF OPEN_P condition CLOSE_P . OPEN var_assign CLOSE
    (33) expression -> IF OPEN_P condition CLOSE_P . OPEN expression CLOSE expression
    (34) expression -> IF OPEN_P condition CLOSE_P . OPEN var_assign CLOSE expression
    (35) expression -> IF OPEN_P condition CLOSE_P . OPEN var_assign CLOSE var_assign
    (36) expression -> IF OPEN_P condition CLOSE_P . OPEN expression CLOSE var_assign
    (37) expression -> IF OPEN_P condition CLOSE_P . OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> IF OPEN_P condition CLOSE_P . OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> IF OPEN_P condition CLOSE_P . OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> IF OPEN_P condition CLOSE_P . OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> IF OPEN_P condition CLOSE_P . OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> IF OPEN_P condition CLOSE_P . OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> IF OPEN_P condition CLOSE_P . OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> IF OPEN_P condition CLOSE_P . OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> IF OPEN_P condition CLOSE_P . OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> IF OPEN_P condition CLOSE_P . OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    OPEN            shift and go to state 59


state 54

    (5) var_assign -> NAME . EQUALS expression SEMICOLON var_assign
    (6) var_assign -> NAME . EQUALS expression SEMICOLON expression
    (7) var_assign -> NAME . EQUALS expression expression
    (8) var_assign -> NAME . EQUALS expression SEMICOLON
    (9) var_assign -> NAME . EQUALS INPUT SEMICOLON
    (17) expression -> NAME .

    EQUALS          shift and go to state 21
    MULTIPLY        reduce using rule 17 (expression -> NAME .)
    DIVIDE          reduce using rule 17 (expression -> NAME .)
    PLUS            reduce using rule 17 (expression -> NAME .)
    MINUS           reduce using rule 17 (expression -> NAME .)
    $end            reduce using rule 17 (expression -> NAME .)
    SEMICOLON       reduce using rule 17 (expression -> NAME .)
    INT             reduce using rule 17 (expression -> NAME .)
    FLOAT           reduce using rule 17 (expression -> NAME .)
    STRING          reduce using rule 17 (expression -> NAME .)
    NAME            reduce using rule 17 (expression -> NAME .)
    DRAW            reduce using rule 17 (expression -> NAME .)
    FOR             reduce using rule 17 (expression -> NAME .)
    PRINT           reduce using rule 17 (expression -> NAME .)
    IF              reduce using rule 17 (expression -> NAME .)
    CLOSE           reduce using rule 17 (expression -> NAME .)
    CLOSE_P         reduce using rule 17 (expression -> NAME .)


state 55

    (6) var_assign -> NAME EQUALS expression SEMICOLON expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    SEMICOLON       reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    INT             reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    FLOAT           reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    STRING          reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    NAME            reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    DRAW            reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    FOR             reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    PRINT           reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    IF              reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    CLOSE           reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    CLOSE_P         reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17

  ! MULTIPLY        [ reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .) ]
  ! DIVIDE          [ reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .) ]
  ! PLUS            [ reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .) ]
  ! MINUS           [ reduce using rule 6 (var_assign -> NAME EQUALS expression SEMICOLON expression .) ]


state 56

    (5) var_assign -> NAME EQUALS expression SEMICOLON var_assign .

    $end            reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    MULTIPLY        reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    DIVIDE          reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    PLUS            reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    MINUS           reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    SEMICOLON       reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    INT             reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    FLOAT           reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    STRING          reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    NAME            reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    DRAW            reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    FOR             reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    PRINT           reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    IF              reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    CLOSE           reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)
    CLOSE_P         reduce using rule 5 (var_assign -> NAME EQUALS expression SEMICOLON var_assign .)


state 57

    (18) expression -> DRAW OPEN_P expression expression expression . expression CLOSE_P SEMICOLON
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 60

state 58

    (19) expression -> FOR OPEN_P INT CLOSE_P OPEN . var_assign CLOSE expression
    (20) expression -> FOR OPEN_P INT CLOSE_P OPEN . expression CLOSE expression
    (21) expression -> FOR OPEN_P INT CLOSE_P OPEN . expression CLOSE var_assign
    (22) expression -> FOR OPEN_P INT CLOSE_P OPEN . var_assign CLOSE var_assign
    (23) expression -> FOR OPEN_P INT CLOSE_P OPEN . var_assign CLOSE
    (24) expression -> FOR OPEN_P INT CLOSE_P OPEN . expression CLOSE
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

    NAME            shift and go to state 54
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    var_assign                     shift and go to state 61
    expression                     shift and go to state 62

state 59

    (31) expression -> IF OPEN_P condition CLOSE_P OPEN . expression CLOSE
    (32) expression -> IF OPEN_P condition CLOSE_P OPEN . var_assign CLOSE
    (33) expression -> IF OPEN_P condition CLOSE_P OPEN . expression CLOSE expression
    (34) expression -> IF OPEN_P condition CLOSE_P OPEN . var_assign CLOSE expression
    (35) expression -> IF OPEN_P condition CLOSE_P OPEN . var_assign CLOSE var_assign
    (36) expression -> IF OPEN_P condition CLOSE_P OPEN . expression CLOSE var_assign
    (37) expression -> IF OPEN_P condition CLOSE_P OPEN . expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> IF OPEN_P condition CLOSE_P OPEN . var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> IF OPEN_P condition CLOSE_P OPEN . var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> IF OPEN_P condition CLOSE_P OPEN . expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> IF OPEN_P condition CLOSE_P OPEN . expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> IF OPEN_P condition CLOSE_P OPEN . var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> IF OPEN_P condition CLOSE_P OPEN . var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> IF OPEN_P condition CLOSE_P OPEN . var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> IF OPEN_P condition CLOSE_P OPEN . expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> IF OPEN_P condition CLOSE_P OPEN . expression CLOSE ELSE OPEN expression CLOSE var_assign
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON

    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 63
    var_assign                     shift and go to state 64

state 60

    (18) expression -> DRAW OPEN_P expression expression expression expression . CLOSE_P SEMICOLON
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

    CLOSE_P         shift and go to state 65
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 61

    (19) expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign . CLOSE expression
    (22) expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign . CLOSE var_assign
    (23) expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign . CLOSE

    CLOSE           shift and go to state 66


state 62

    (20) expression -> FOR OPEN_P INT CLOSE_P OPEN expression . CLOSE expression
    (21) expression -> FOR OPEN_P INT CLOSE_P OPEN expression . CLOSE var_assign
    (24) expression -> FOR OPEN_P INT CLOSE_P OPEN expression . CLOSE
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

    CLOSE           shift and go to state 67
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 63

    (31) expression -> IF OPEN_P condition CLOSE_P OPEN expression . CLOSE
    (33) expression -> IF OPEN_P condition CLOSE_P OPEN expression . CLOSE expression
    (36) expression -> IF OPEN_P condition CLOSE_P OPEN expression . CLOSE var_assign
    (37) expression -> IF OPEN_P condition CLOSE_P OPEN expression . CLOSE ELSE OPEN expression CLOSE
    (40) expression -> IF OPEN_P condition CLOSE_P OPEN expression . CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> IF OPEN_P condition CLOSE_P OPEN expression . CLOSE ELSE OPEN expression CLOSE expression
    (45) expression -> IF OPEN_P condition CLOSE_P OPEN expression . CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> IF OPEN_P condition CLOSE_P OPEN expression . CLOSE ELSE OPEN expression CLOSE var_assign
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

    CLOSE           shift and go to state 68
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 64

    (32) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign . CLOSE
    (34) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign . CLOSE expression
    (35) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign . CLOSE var_assign
    (38) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign . CLOSE ELSE OPEN expression CLOSE
    (39) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign . CLOSE ELSE OPEN var_assign CLOSE
    (42) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign . CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign . CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign . CLOSE ELSE OPEN var_assign CLOSE var_assign

    CLOSE           shift and go to state 69


state 65

    (18) expression -> DRAW OPEN_P expression expression expression expression CLOSE_P . SEMICOLON

    SEMICOLON       shift and go to state 70


state 66

    (19) expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE . expression
    (22) expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE . var_assign
    (23) expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for DRAW resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    MULTIPLY        reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .)
    DIVIDE          reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .)
    PLUS            reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .)
    MINUS           reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .)
    $end            reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .)
    SEMICOLON       reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .)
    CLOSE           reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .)
    CLOSE_P         reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

  ! INT             [ reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .) ]
  ! FLOAT           [ reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .) ]
  ! STRING          [ reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .) ]
  ! NAME            [ reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .) ]
  ! DRAW            [ reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .) ]
  ! FOR             [ reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .) ]
  ! PRINT           [ reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .) ]
  ! IF              [ reduce using rule 23 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE .) ]

    var_assign                     shift and go to state 71
    expression                     shift and go to state 72

state 67

    (20) expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE . expression
    (21) expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE . var_assign
    (24) expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for DRAW resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    MULTIPLY        reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .)
    DIVIDE          reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .)
    PLUS            reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .)
    MINUS           reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .)
    $end            reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .)
    SEMICOLON       reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .)
    CLOSE           reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .)
    CLOSE_P         reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

  ! INT             [ reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .) ]
  ! FLOAT           [ reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .) ]
  ! STRING          [ reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .) ]
  ! NAME            [ reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .) ]
  ! DRAW            [ reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .) ]
  ! FOR             [ reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .) ]
  ! PRINT           [ reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .) ]
  ! IF              [ reduce using rule 24 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE .) ]

    expression                     shift and go to state 73
    var_assign                     shift and go to state 74

state 68

    (31) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .
    (33) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE . expression
    (36) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE . var_assign
    (37) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE . ELSE OPEN expression CLOSE
    (40) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE . ELSE OPEN var_assign CLOSE
    (41) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE . ELSE OPEN expression CLOSE expression
    (45) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE . ELSE OPEN var_assign CLOSE expression
    (46) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE . ELSE OPEN expression CLOSE var_assign
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for DRAW resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    MULTIPLY        reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .)
    DIVIDE          reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .)
    PLUS            reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .)
    MINUS           reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .)
    $end            reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .)
    SEMICOLON       reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .)
    CLOSE           reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .)
    CLOSE_P         reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .)
    ELSE            shift and go to state 77
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

  ! INT             [ reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .) ]
  ! FLOAT           [ reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .) ]
  ! STRING          [ reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .) ]
  ! NAME            [ reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .) ]
  ! DRAW            [ reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .) ]
  ! FOR             [ reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .) ]
  ! PRINT           [ reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .) ]
  ! IF              [ reduce using rule 31 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE .) ]

    expression                     shift and go to state 75
    var_assign                     shift and go to state 76

state 69

    (32) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .
    (34) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE . expression
    (35) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE . var_assign
    (38) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE . ELSE OPEN expression CLOSE
    (39) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE . ELSE OPEN var_assign CLOSE
    (42) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE . ELSE OPEN expression CLOSE expression
    (43) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE . ELSE OPEN var_assign CLOSE expression
    (44) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE . ELSE OPEN var_assign CLOSE var_assign
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for DRAW resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    MULTIPLY        reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .)
    DIVIDE          reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .)
    PLUS            reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .)
    MINUS           reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .)
    $end            reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .)
    SEMICOLON       reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .)
    CLOSE           reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .)
    CLOSE_P         reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .)
    ELSE            shift and go to state 80
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

  ! INT             [ reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .) ]
  ! FLOAT           [ reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .) ]
  ! STRING          [ reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .) ]
  ! NAME            [ reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .) ]
  ! DRAW            [ reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .) ]
  ! FOR             [ reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .) ]
  ! PRINT           [ reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .) ]
  ! IF              [ reduce using rule 32 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE .) ]

    var_assign                     shift and go to state 78
    expression                     shift and go to state 79

state 70

    (18) expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .

    MULTIPLY        reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    DIVIDE          reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    PLUS            reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    MINUS           reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    $end            reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    SEMICOLON       reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    INT             reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    FLOAT           reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    STRING          reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    NAME            reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    DRAW            reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    FOR             reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    PRINT           reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    IF              reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    CLOSE           reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)
    CLOSE_P         reduce using rule 18 (expression -> DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON .)


state 71

    (22) expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .

    MULTIPLY        reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    DIVIDE          reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    PLUS            reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    MINUS           reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    $end            reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    SEMICOLON       reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    INT             reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    FLOAT           reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    STRING          reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    NAME            reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    DRAW            reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    FOR             reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    PRINT           reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    IF              reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    CLOSE           reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)
    CLOSE_P         reduce using rule 22 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign .)


state 72

    (19) expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    SEMICOLON       reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    INT             reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    FLOAT           reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    STRING          reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    NAME            reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    DRAW            reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    FOR             reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    PRINT           reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    IF              reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    CLOSE           reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    CLOSE_P         reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17

  ! MULTIPLY        [ reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .) ]
  ! DIVIDE          [ reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .) ]
  ! PLUS            [ reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression .) ]


state 73

    (20) expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    SEMICOLON       reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    INT             reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    FLOAT           reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    STRING          reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    NAME            reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    DRAW            reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    FOR             reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    PRINT           reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    IF              reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    CLOSE           reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    CLOSE_P         reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17

  ! MULTIPLY        [ reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .) ]
  ! PLUS            [ reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression .) ]


state 74

    (21) expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .

    MULTIPLY        reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    DIVIDE          reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    PLUS            reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    MINUS           reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    $end            reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    SEMICOLON       reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    INT             reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    FLOAT           reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    STRING          reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    NAME            reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    DRAW            reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    FOR             reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    PRINT           reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    IF              reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    CLOSE           reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)
    CLOSE_P         reduce using rule 21 (expression -> FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign .)


state 75

    (33) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    SEMICOLON       reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    INT             reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    FLOAT           reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    STRING          reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    NAME            reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    DRAW            reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    FOR             reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    PRINT           reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    IF              reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    CLOSE           reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    CLOSE_P         reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17

  ! MULTIPLY        [ reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .) ]
  ! PLUS            [ reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .) ]
  ! MINUS           [ reduce using rule 33 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression .) ]


state 76

    (36) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .

    MULTIPLY        reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    DIVIDE          reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    PLUS            reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    MINUS           reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    $end            reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    SEMICOLON       reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    INT             reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    FLOAT           reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    STRING          reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    NAME            reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    DRAW            reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    FOR             reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    PRINT           reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    IF              reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    CLOSE           reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)
    CLOSE_P         reduce using rule 36 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign .)


state 77

    (37) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE . OPEN expression CLOSE
    (40) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE . OPEN var_assign CLOSE
    (41) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE . OPEN expression CLOSE expression
    (45) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE . OPEN var_assign CLOSE expression
    (46) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE . OPEN expression CLOSE var_assign

    OPEN            shift and go to state 81


state 78

    (35) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .

    MULTIPLY        reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    DIVIDE          reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    PLUS            reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    MINUS           reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    $end            reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    SEMICOLON       reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    INT             reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    FLOAT           reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    STRING          reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    NAME            reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    DRAW            reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    FOR             reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    PRINT           reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    IF              reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    CLOSE           reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)
    CLOSE_P         reduce using rule 35 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign .)


state 79

    (34) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    SEMICOLON       reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    INT             reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    FLOAT           reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    STRING          reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    NAME            reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    DRAW            reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    FOR             reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    PRINT           reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    IF              reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    CLOSE           reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    CLOSE_P         reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17

  ! MULTIPLY        [ reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .) ]
  ! PLUS            [ reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .) ]
  ! MINUS           [ reduce using rule 34 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression .) ]


state 80

    (38) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE . OPEN expression CLOSE
    (39) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE . OPEN var_assign CLOSE
    (42) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE . OPEN expression CLOSE expression
    (43) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE . OPEN var_assign CLOSE expression
    (44) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE . OPEN var_assign CLOSE var_assign

    OPEN            shift and go to state 82


state 81

    (37) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN . expression CLOSE
    (40) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN . var_assign CLOSE
    (41) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN . expression CLOSE expression
    (45) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN . var_assign CLOSE expression
    (46) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN . expression CLOSE var_assign
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON

    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    expression                     shift and go to state 83
    var_assign                     shift and go to state 84

state 82

    (38) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN . expression CLOSE
    (39) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN . var_assign CLOSE
    (42) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN . expression CLOSE expression
    (43) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN . var_assign CLOSE expression
    (44) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN . var_assign CLOSE var_assign
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON

    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

    var_assign                     shift and go to state 85
    expression                     shift and go to state 86

state 83

    (37) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression . CLOSE
    (41) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression . CLOSE expression
    (46) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression . CLOSE var_assign
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

    CLOSE           shift and go to state 87
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 84

    (40) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign . CLOSE
    (45) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign . CLOSE expression

    CLOSE           shift and go to state 88


state 85

    (39) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign . CLOSE
    (43) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign . CLOSE expression
    (44) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign . CLOSE var_assign

    CLOSE           shift and go to state 89


state 86

    (38) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression . CLOSE
    (42) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression . CLOSE expression
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

    CLOSE           shift and go to state 90
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 87

    (37) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .
    (41) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE . expression
    (46) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE . var_assign
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for DRAW resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    MULTIPLY        reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .)
    DIVIDE          reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .)
    PLUS            reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .)
    MINUS           reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .)
    $end            reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .)
    SEMICOLON       reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .)
    CLOSE           reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .)
    CLOSE_P         reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

  ! INT             [ reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .) ]
  ! FLOAT           [ reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .) ]
  ! STRING          [ reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .) ]
  ! NAME            [ reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .) ]
  ! DRAW            [ reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .) ]
  ! FOR             [ reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .) ]
  ! PRINT           [ reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .) ]
  ! IF              [ reduce using rule 37 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE .) ]

    expression                     shift and go to state 91
    var_assign                     shift and go to state 92

state 88

    (40) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .
    (45) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE . expression
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for DRAW resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    MULTIPLY        reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .)
    DIVIDE          reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .)
    PLUS            reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .)
    MINUS           reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .)
    $end            reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .)
    SEMICOLON       reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .)
    CLOSE           reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .)
    CLOSE_P         reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

  ! INT             [ reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! FLOAT           [ reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! STRING          [ reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! NAME            [ reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! DRAW            [ reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! FOR             [ reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! PRINT           [ reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! IF              [ reduce using rule 40 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE .) ]

    expression                     shift and go to state 93

state 89

    (39) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .
    (43) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE . expression
    (44) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE . var_assign
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign
    (5) var_assign -> . NAME EQUALS expression SEMICOLON var_assign
    (6) var_assign -> . NAME EQUALS expression SEMICOLON expression
    (7) var_assign -> . NAME EQUALS expression expression
    (8) var_assign -> . NAME EQUALS expression SEMICOLON
    (9) var_assign -> . NAME EQUALS INPUT SEMICOLON

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for DRAW resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    MULTIPLY        reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .)
    DIVIDE          reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .)
    PLUS            reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .)
    MINUS           reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .)
    $end            reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .)
    SEMICOLON       reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .)
    CLOSE           reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .)
    CLOSE_P         reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

  ! INT             [ reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! FLOAT           [ reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! STRING          [ reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! NAME            [ reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! DRAW            [ reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! FOR             [ reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! PRINT           [ reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .) ]
  ! IF              [ reduce using rule 39 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE .) ]

    var_assign                     shift and go to state 94
    expression                     shift and go to state 95

state 90

    (38) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .
    (42) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE . expression
    (10) expression -> . expression MULTIPLY expression SEMICOLON
    (11) expression -> . expression DIVIDE expression SEMICOLON
    (12) expression -> . expression PLUS expression SEMICOLON
    (13) expression -> . expression MINUS expression SEMICOLON
    (14) expression -> . INT
    (15) expression -> . FLOAT
    (16) expression -> . STRING
    (17) expression -> . NAME
    (18) expression -> . DRAW OPEN_P expression expression expression expression CLOSE_P SEMICOLON
    (19) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE expression
    (20) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE expression
    (21) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE var_assign
    (22) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE var_assign
    (23) expression -> . FOR OPEN_P INT CLOSE_P OPEN var_assign CLOSE
    (24) expression -> . FOR OPEN_P INT CLOSE_P OPEN expression CLOSE
    (25) expression -> . PRINT expression SEMICOLON expression
    (26) expression -> . PRINT expression SEMICOLON var_assign
    (27) expression -> . PRINT expression SEMICOLON
    (31) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE
    (32) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE
    (33) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE expression
    (34) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE expression
    (35) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE var_assign
    (36) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE var_assign
    (37) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE
    (38) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE
    (39) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE
    (40) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE
    (41) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression
    (42) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression
    (43) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression
    (44) expression -> . IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign
    (45) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression
    (46) expression -> . IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for DRAW resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    MULTIPLY        reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .)
    DIVIDE          reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .)
    PLUS            reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .)
    MINUS           reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .)
    $end            reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .)
    SEMICOLON       reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .)
    CLOSE           reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .)
    CLOSE_P         reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 26
    DRAW            shift and go to state 10
    FOR             shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13

  ! INT             [ reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .) ]
  ! FLOAT           [ reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .) ]
  ! STRING          [ reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .) ]
  ! NAME            [ reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .) ]
  ! DRAW            [ reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .) ]
  ! FOR             [ reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .) ]
  ! PRINT           [ reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .) ]
  ! IF              [ reduce using rule 38 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE .) ]

    expression                     shift and go to state 96

state 91

    (41) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    SEMICOLON       reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    INT             reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    FLOAT           reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    STRING          reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    NAME            reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    DRAW            reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    FOR             reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    PRINT           reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    IF              reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    CLOSE           reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    CLOSE_P         reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17

  ! MULTIPLY        [ reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .) ]
  ! PLUS            [ reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE expression .) ]


state 92

    (46) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .

    MULTIPLY        reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    DIVIDE          reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    PLUS            reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    MINUS           reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    $end            reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    SEMICOLON       reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    INT             reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    FLOAT           reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    STRING          reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    NAME            reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    DRAW            reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    FOR             reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    PRINT           reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    IF              reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    CLOSE           reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)
    CLOSE_P         reduce using rule 46 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN expression CLOSE var_assign .)


state 93

    (45) expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    SEMICOLON       reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    INT             reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    FLOAT           reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    STRING          reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    NAME            reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    DRAW            reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    FOR             reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    PRINT           reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    IF              reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    CLOSE           reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    CLOSE_P         reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17

  ! MULTIPLY        [ reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .) ]
  ! PLUS            [ reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> IF OPEN_P condition CLOSE_P OPEN expression CLOSE ELSE OPEN var_assign CLOSE expression .) ]


state 94

    (44) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .

    MULTIPLY        reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    DIVIDE          reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    PLUS            reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    MINUS           reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    $end            reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    SEMICOLON       reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    INT             reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    FLOAT           reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    STRING          reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    NAME            reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    DRAW            reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    FOR             reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    PRINT           reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    IF              reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    CLOSE           reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)
    CLOSE_P         reduce using rule 44 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE var_assign .)


state 95

    (43) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    SEMICOLON       reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    INT             reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    FLOAT           reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    STRING          reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    NAME            reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    DRAW            reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    FOR             reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    PRINT           reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    IF              reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    CLOSE           reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    CLOSE_P         reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17

  ! MULTIPLY        [ reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .) ]
  ! PLUS            [ reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN var_assign CLOSE expression .) ]


state 96

    (42) expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .
    (10) expression -> expression . MULTIPLY expression SEMICOLON
    (11) expression -> expression . DIVIDE expression SEMICOLON
    (12) expression -> expression . PLUS expression SEMICOLON
    (13) expression -> expression . MINUS expression SEMICOLON

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    SEMICOLON       reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    INT             reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    FLOAT           reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    STRING          reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    NAME            reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    DRAW            reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    FOR             reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    PRINT           reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    IF              reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    CLOSE           reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    CLOSE_P         reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .)
    MULTIPLY        shift and go to state 14
    DIVIDE          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17

  ! MULTIPLY        [ reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .) ]
  ! PLUS            [ reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> IF OPEN_P condition CLOSE_P OPEN var_assign CLOSE ELSE OPEN expression CLOSE expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 39 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 39 resolved as shift
WARNING: shift/reduce conflict for STRING in state 39 resolved as shift
WARNING: shift/reduce conflict for NAME in state 39 resolved as shift
WARNING: shift/reduce conflict for DRAW in state 39 resolved as shift
WARNING: shift/reduce conflict for FOR in state 39 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 39 resolved as shift
WARNING: shift/reduce conflict for IF in state 39 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 46 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for NAME in state 47 resolved as shift
WARNING: shift/reduce conflict for INT in state 47 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 47 resolved as shift
WARNING: shift/reduce conflict for STRING in state 47 resolved as shift
WARNING: shift/reduce conflict for DRAW in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 51 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 55 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for INT in state 66 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 66 resolved as shift
WARNING: shift/reduce conflict for STRING in state 66 resolved as shift
WARNING: shift/reduce conflict for NAME in state 66 resolved as shift
WARNING: shift/reduce conflict for DRAW in state 66 resolved as shift
WARNING: shift/reduce conflict for FOR in state 66 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for INT in state 67 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 67 resolved as shift
WARNING: shift/reduce conflict for STRING in state 67 resolved as shift
WARNING: shift/reduce conflict for NAME in state 67 resolved as shift
WARNING: shift/reduce conflict for DRAW in state 67 resolved as shift
WARNING: shift/reduce conflict for FOR in state 67 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 67 resolved as shift
WARNING: shift/reduce conflict for IF in state 67 resolved as shift
WARNING: shift/reduce conflict for INT in state 68 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 68 resolved as shift
WARNING: shift/reduce conflict for STRING in state 68 resolved as shift
WARNING: shift/reduce conflict for NAME in state 68 resolved as shift
WARNING: shift/reduce conflict for DRAW in state 68 resolved as shift
WARNING: shift/reduce conflict for FOR in state 68 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 68 resolved as shift
WARNING: shift/reduce conflict for INT in state 69 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 69 resolved as shift
WARNING: shift/reduce conflict for STRING in state 69 resolved as shift
WARNING: shift/reduce conflict for NAME in state 69 resolved as shift
WARNING: shift/reduce conflict for DRAW in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 75 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for INT in state 87 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 87 resolved as shift
WARNING: shift/reduce conflict for STRING in state 87 resolved as shift
WARNING: shift/reduce conflict for NAME in state 87 resolved as shift
WARNING: shift/reduce conflict for DRAW in state 87 resolved as shift
WARNING: shift/reduce conflict for FOR in state 87 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 87 resolved as shift
WARNING: shift/reduce conflict for IF in state 87 resolved as shift
WARNING: shift/reduce conflict for INT in state 88 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 88 resolved as shift
WARNING: shift/reduce conflict for STRING in state 88 resolved as shift
WARNING: shift/reduce conflict for NAME in state 88 resolved as shift
WARNING: shift/reduce conflict for DRAW in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for INT in state 89 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 89 resolved as shift
WARNING: shift/reduce conflict for STRING in state 89 resolved as shift
WARNING: shift/reduce conflict for NAME in state 89 resolved as shift
WARNING: shift/reduce conflict for DRAW in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for INT in state 90 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 90 resolved as shift
WARNING: shift/reduce conflict for STRING in state 90 resolved as shift
WARNING: shift/reduce conflict for NAME in state 90 resolved as shift
WARNING: shift/reduce conflict for DRAW in state 90 resolved as shift
WARNING: shift/reduce conflict for FOR in state 90 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 91 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
